{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"FHIR Web App\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Patients\", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  ref: \"d3Container\"\n};\nconst _hoisted_5 = {\n  ref: \"d3BarChartContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.fetchPatients && $options.fetchPatients(...args))\n  }, \"Fetch Patients\"), $data.patients.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: patient.id\n    }, _toDisplayString(patient.resource.name[0].given[0]), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["_createElementVNode","key","ref","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","fetchPatients","$data","patients","length","_hoisted_2","_hoisted_3","_Fragment","_renderList","patient","id","resource","name","given","_createCommentVNode","_hoisted_4","_hoisted_5"],"sources":["C:\\xampp\\htdocs\\fhir_web_app\\fhir_web_app_frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FHIR Web App</h1>\n    <button @click=\"fetchPatients\">Fetch Patients</button>\n    <div v-if=\"patients.length\">\n      <h2>Patients</h2>\n      <ul>\n        <li v-for=\"patient in patients\" :key=\"patient.id\">\n          {{ patient.resource.name[0].given[0] }}\n        </li>\n      </ul>\n    </div>\n    <div ref=\"d3Container\"></div>\n     <div ref=\"d3BarChartContainer\"></div>\n    \n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\",\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios\n          .get(\"http://localhost:3000/api/patients\")\n          .then((success) => {\n            console.log(\"Successful request to FHIR server\");\n            console.log(success);\n            this.patients = success.data.entry;\n            this.renderD3Charts();\n          })\n          .catch((error) => {\n            console.log(error);\n            alert(`Error! ${error}`);\n          });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n\n    renderD3Charts() {\n      //  this.renderLineChart();\n      //  this.renderPieChart();\n      this.renderBarChart();\n    },\n    renderLineChart() {\n      const svgLine = d3\n        .select(this.$refs.d3Container)\n        .append(\"svg\")\n        .attr(\"width\", 400)\n        .attr(\"height\", 200);\n\n      svgLine\n        .append(\"path\")\n        .datum(this.patients)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 2)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x((d, i) => i * 80)\n            .y((d) => parseInt(d.birthDate.split(\"-\")[2]) * 2)\n        );\n    },\n    renderPieChart() {\n      const svgPie = d3\n        .select(this.$refs.d3Container)\n        .append(\"svg\")\n        .attr(\"width\", 200)\n        .attr(\"height\", 200);\n\n      const pie = d3.pie();\n      const arc = d3.arc().innerRadius(0).outerRadius(100);\n\n      svgPie\n        .selectAll(\"path\")\n        .data(pie(this.patients.map(() => 1)))\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", arc)\n        .attr(\"fill\", (d, i) => d3.schemeCategory10[i]);\n    },\n\n    renderBarChart() {\n      {\n      var dataset = this.patients\n        // var dataset = [5, 2, 3, 4, 5];\n      var svgWidth = 700,\n        svgHeight = 500,\n        barPadding = 2,\n        yGraphPadding = 20;\n       var xGraphPadding = 30;\n      var barWidth = svgWidth / dataset.length;\n\n      var svg = d3\n        .select(this.$refs.d3BarChartContainer)\n        .append(\"svg\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n\n      var yScale = d3\n        .scaleLinear()\n        .domain([ 0 ,d3.max(dataset) + yGraphPadding])\n        .range([  0, svgHeight + yGraphPadding]);\n\n      var barChart = svg\n        .selectAll(\"rect\")\n        .data(dataset)\n        .enter()\n        .append(\"rect\")\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d);\n        })\n        .attr(\"height\", function (d) {\n          return yScale(d) - yGraphPadding;\n        })\n        .attr(\"width\", barWidth - barPadding)\n        .attr(\"transform\", function (d, i) {\n          var translate = [(barWidth  * i) + xGraphPadding, 0];\n          return \"translate(\" + translate + \")\";\n        });\n      svg\n        .selectAll(\"text\")\n        .data(dataset)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n          return d;\n        })\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d) - 2 ;\n        })\n        .attr(\"x\", function (d, i) {\n          return ((barWidth) * i)+ xGraphPadding ;\n        })\n        .attr(\"fill\", \"red\");\n\n\n     yScale = d3\n        .scaleLinear()\n        .domain([0 ,d3.max(dataset) + yGraphPadding])\n        .range([svgHeight -yGraphPadding , 0]);\n\n      var xScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(dataset)])\n        .range([0, svgWidth]);\n\n      var xAxis = d3.axisBottom().scale(xScale);\n\n      var yAxis = d3.axisLeft().scale(yScale);\n      svg.append(\"g\").attr(\"transform\", \"translate(\"+xGraphPadding+\", 0)\").call(yAxis);\n\n      var xAxisTranslate = svgHeight- 20;\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\"+xGraphPadding+\", \" + xAxisTranslate + \")\")\n        .call(xAxis);\n\n      return barChart;\n    }\n    },\n  },\n};\n</script>\n<style>\n/* Add your styles here */\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAAqB,YAAjB,cAAY;;EAFpBC,GAAA;AAAA;gCAKMD,mBAAA,CAAiB,YAAb,UAAQ;;EAOTE,GAAG,EAAC;AAAa;;EAChBA,GAAG,EAAC;AAAqB;;uBAZjCC,mBAAA,CAcM,cAbJC,UAAqB,EACrBJ,mBAAA,CAAsD;IAA7CK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,gBAAc,GAClCG,KAAA,CAAAC,QAAQ,CAACC,MAAM,I,cAA1BT,mBAAA,CAOM,OAXVU,UAAA,GAKMC,UAAiB,EACjBd,mBAAA,CAIK,c,kBAHHG,mBAAA,CAEKY,SAAA,QATbC,WAAA,CAO8BN,KAAA,CAAAC,QAAQ,EAAnBM,OAAO;yBAAlBd,mBAAA,CAEK;MAF4BF,GAAG,EAAEgB,OAAO,CAACC;wBACzCD,OAAO,CAACE,QAAQ,CAACC,IAAI,IAAIC,KAAK;wCAR3CC,mBAAA,gBAYItB,mBAAA,CAA6B,OAA7BuB,UAA6B,+BAC5BvB,mBAAA,CAAqC,OAArCwB,UAAqC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}