{"ast":null,"code":"import axios from \"axios\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\"\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios.get(\"http://localhost:3000/api/patients\").then(success => {\n          console.log(\"Successful request to FHIR server\");\n          console.log(success);\n          this.patients = success.data.entry;\n          this.renderD3Charts();\n        }).catch(error => {\n          console.log(error);\n          alert(`Error! ${error}`);\n        });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n    renderD3Charts() {\n      //  this.renderLineChart();\n      //  this.renderPieChart();\n      this.renderBarChart();\n    },\n    renderLineChart() {\n      const svgLine = d3.select(this.$refs.d3Container).append(\"svg\").attr(\"width\", 400).attr(\"height\", 200);\n      svgLine.append(\"path\").datum(this.patients).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 2).attr(\"d\", d3.line().x((d, i) => i * 80).y(d => parseInt(d.birthDate.split(\"-\")[2]) * 2));\n    },\n    renderPieChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(patient => patient.resource.birthDate && patient.resource.birthDate.length >= 4);\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n      var data = Object.entries(birthYearCounts).map(([birthYear, count]) => ({\n        birthYear: birthYear,\n        count: count\n      }));\n      var svgWidth = 500,\n        svgHeight = 300,\n        radius = Math.min(svgWidth, svgHeight) / 2;\n      var svg = d3.select(this.$refs.d3PieChartContainer).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n\n      // Create group element to hold pie chart\n      var g = svg.append(\"g\").attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\");\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n      var pie = d3.pie().value(function (d) {\n        return d.count;\n      });\n      var path = d3.arc().outerRadius(radius).innerRadius(0);\n      var arc = g.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\n      arc.append(\"path\").attr(\"d\", path).attr(\"fill\", function (d) {\n        return color(d.data.birthYear);\n      });\n      var label = d3.arc().outerRadius(radius).innerRadius(0);\n      arc.append(\"text\").attr(\"transform\", function (d) {\n        return \"translate(\" + label.centroid(d) + \")\";\n      }).attr(\"text-anchor\", \"middle\").text(function (d) {\n        return d.data.birthYear + \":\" + d.data.count + \" patients\";\n      });\n    },\n    renderBarChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(patient => patient.resource.birthDate && patient.resource.birthDate.length >= 4);\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n      var birthYears = Object.keys(birthYearCounts);\n      var counts = Object.values(birthYearCounts);\n      var svgWidth = 700,\n        svgHeight = 500,\n        barPadding = 2,\n        yGraphPadding = 20;\n      var xGraphPadding = 30;\n      var barWidth = svgWidth / birthYears.length;\n      var svg = d3.select(this.$refs.d3BarChartContainer).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n      var yScale = d3.scaleLinear().domain([0, d3.max(counts) + yGraphPadding]).range([0, svgHeight + yGraphPadding]);\n      var barChart = svg.selectAll(\"rect\").data(counts).enter().append(\"rect\").attr(\"y\", function (d) {\n        return svgHeight - yScale(d) > 0 ? svgHeight - yScale(d) : 0;\n      }).attr(\"height\", function (d) {\n        return yScale(d) - yGraphPadding;\n      }).attr(\"width\", barWidth - barPadding).attr(\"transform\", function (d, i) {\n        var translate = [barWidth * i + xGraphPadding, 0];\n        return \"translate(\" + translate + \")\";\n      });\n      svg.selectAll(\"text\").data(counts).enter().append(\"text\").text(function (d) {\n        return d;\n      }).attr(\"y\", function (d) {\n        return svgHeight - yScale(d) - 2;\n      }).attr(\"x\", function (d, i) {\n        return barWidth * i + xGraphPadding;\n      }).attr(\"fill\", \"red\");\n      yScale = d3.scaleLinear().domain([0, d3.max(counts) + yGraphPadding]).range([svgHeight - yGraphPadding, 0]);\n\n      // Update xScale to use d3.scaleBand()\n      var xScale = d3.scaleBand().domain(birthYears).range([0, svgWidth - xGraphPadding]);\n      var xAxis = d3.axisBottom().scale(xScale);\n      var yAxis = d3.axisLeft().scale(yScale);\n      svg.append(\"g\").attr(\"transform\", \"translate(\" + xGraphPadding + \", 0)\").call(yAxis);\n      var xAxisTranslate = svgHeight - 20;\n      svg.append(\"g\").attr(\"transform\", \"translate(\" + xGraphPadding + \", \" + xAxisTranslate + \")\").call(xAxis);\n      return barChart;\n    }\n  }\n};","map":{"version":3,"names":["axios","d3","mounted","fetchPatients","data","patients","searchId","methods","get","then","success","console","log","entry","renderD3Charts","catch","error","alert","message","renderBarChart","renderLineChart","svgLine","select","$refs","d3Container","append","attr","datum","line","x","d","i","y","parseInt","birthDate","split","renderPieChart","filteredPatients","filter","patient","resource","length","birthYearCounts","reduce","counts","birthYear","substring","Object","entries","map","count","svgWidth","svgHeight","radius","Math","min","svg","d3PieChartContainer","g","color","scaleOrdinal","schemeCategory10","pie","value","path","arc","outerRadius","innerRadius","selectAll","enter","label","centroid","text","birthYears","keys","values","barPadding","yGraphPadding","xGraphPadding","barWidth","d3BarChartContainer","yScale","scaleLinear","domain","max","range","barChart","translate","xScale","scaleBand","xAxis","axisBottom","scale","yAxis","axisLeft","call","xAxisTranslate"],"sources":["C:\\xampp\\htdocs\\fhir_web_app\\fhir_web_app_frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FHIR Web App</h1>\n    <button @click=\"fetchPatients\">Fetch Patients</button>\n    <div v-if=\"patients.length\">\n      <h2>Patients</h2>\n      <ul>\n        <li v-for=\"patient in patients\" :key=\"patient.id\">\n          {{ patient.resource.name[0].given[0] }}\n          {{\n            patient.resource.birthDate\n              ? new Date(patient.resource.birthDate).getFullYear()\n              : 0\n          }}\n        </li>\n      </ul>\n    </div>\n    <div ref=\"d3Container\"></div>\n    <div ref=\"d3BarChartContainer\"></div>\n    <div ref=\"d3PieChartContainer\"></div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\",\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios\n          .get(\"http://localhost:3000/api/patients\")\n          .then((success) => {\n            console.log(\"Successful request to FHIR server\");\n            console.log(success);\n            this.patients = success.data.entry;\n            this.renderD3Charts();\n          })\n          .catch((error) => {\n            console.log(error);\n            alert(`Error! ${error}`);\n          });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n\n    renderD3Charts() {\n      //  this.renderLineChart();\n    //  this.renderPieChart();\n      this.renderBarChart();\n    },\n    renderLineChart() {\n      const svgLine = d3\n        .select(this.$refs.d3Container)\n        .append(\"svg\")\n        .attr(\"width\", 400)\n        .attr(\"height\", 200);\n\n      svgLine\n        .append(\"path\")\n        .datum(this.patients)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 2)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x((d, i) => i * 80)\n            .y((d) => parseInt(d.birthDate.split(\"-\")[2]) * 2)\n        );\n    },\n    renderPieChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(\n        (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n      );\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n\n      var data = Object.entries(birthYearCounts).map(([birthYear, count]) => ({\n        birthYear: birthYear,\n        count: count,\n      }));\n\n      var svgWidth = 500,\n        svgHeight = 300,\n        radius = Math.min(svgWidth, svgHeight) / 2;\n\n      var svg = d3\n        .select(this.$refs.d3PieChartContainer)\n        .append(\"svg\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n\n      // Create group element to hold pie chart\n      var g = svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\");\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      var pie = d3.pie().value(function (d) {\n        return d.count;\n      });\n\n      var path = d3.arc().outerRadius(radius).innerRadius(0);\n\n      var arc = g.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\n\n      arc\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"fill\", function (d) {\n          return color(d.data.birthYear);\n        });\n\n      var label = d3.arc().outerRadius(radius).innerRadius(0);\n\n      arc\n        .append(\"text\")\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + label.centroid(d) + \")\";\n        })\n        .attr(\"text-anchor\", \"middle\")\n        .text(function (d) {\n          return d.data.birthYear + \":\" + d.data.count + \" patients\";\n        });\n    },\n\n    renderBarChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(\n        (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n      );\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n\n      var birthYears = Object.keys(birthYearCounts);\n      var counts = Object.values(birthYearCounts);\n\n      var svgWidth = 700,\n        svgHeight = 500,\n        barPadding = 2,\n        yGraphPadding = 20;\n      var xGraphPadding = 30;\n      var barWidth = svgWidth / birthYears.length;\n\n      var svg = d3\n        .select(this.$refs.d3BarChartContainer)\n        .append(\"svg\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n\n      var yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(counts) + yGraphPadding])\n        .range([0, svgHeight + yGraphPadding]);\n\n      var barChart = svg\n        .selectAll(\"rect\")\n        .data(counts)\n        .enter()\n        .append(\"rect\")\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d) > 0 ? svgHeight - yScale(d) : 0;\n        })\n        .attr(\"height\", function (d) {\n          return yScale(d) - yGraphPadding;\n        })\n        .attr(\"width\", barWidth - barPadding)\n        .attr(\"transform\", function (d, i) {\n          var translate = [barWidth * i + xGraphPadding, 0];\n          return \"translate(\" + translate + \")\";\n        });\n\n      svg\n        .selectAll(\"text\")\n        .data(counts)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n          return d;\n        })\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d) - 2;\n        })\n        .attr(\"x\", function (d, i) {\n          return barWidth * i + xGraphPadding;\n        })\n        .attr(\"fill\", \"red\");\n\n      yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(counts) + yGraphPadding])\n        .range([svgHeight - yGraphPadding, 0]);\n\n      // Update xScale to use d3.scaleBand()\n      var xScale = d3\n        .scaleBand()\n        .domain(birthYears)\n        .range([0, svgWidth - xGraphPadding]);\n\n      var xAxis = d3.axisBottom().scale(xScale);\n\n      var yAxis = d3.axisLeft().scale(yScale);\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + xGraphPadding + \", 0)\")\n        .call(yAxis);\n\n      var xAxisTranslate = svgHeight - 20;\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + xGraphPadding + \", \" + xAxisTranslate + \")\")\n        .call(xAxis);\n\n      return barChart;\n    },\n  },\n};\n</script>\n<style>\n/* Add your styles here */\n</style>\n"],"mappings":"AAuBA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAO,KAAKC,EAAC,MAAO,IAAI;AAExB,eAAe;EACbC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMJ,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMH,KAAI,CACPQ,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAAEC,OAAO,IAAK;UACjBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAChDD,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;UACpB,IAAI,CAACL,QAAO,GAAIK,OAAO,CAACN,IAAI,CAACS,KAAK;UAClC,IAAI,CAACC,cAAc,CAAC,CAAC;QACvB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;UAChBL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;UAClBC,KAAK,CAAE,UAASD,KAAM,EAAC,CAAC;QAC1B,CAAC,CAAC;MACN,EAAE,OAAOA,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACE,OAAO,CAAC;MAC1D;IACF,CAAC;IAEDJ,cAAcA,CAAA,EAAG;MACf;MACF;MACE,IAAI,CAACK,cAAc,CAAC,CAAC;IACvB,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,MAAMC,OAAM,GAAIpB,EAAC,CACdqB,MAAM,CAAC,IAAI,CAACC,KAAK,CAACC,WAAW,EAC7BC,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAE,GAAG,EACjBA,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;MAEtBL,OAAM,CACHI,MAAM,CAAC,MAAM,EACbE,KAAK,CAAC,IAAI,CAACtB,QAAQ,EACnBqB,IAAI,CAAC,MAAM,EAAE,MAAM,EACnBA,IAAI,CAAC,QAAQ,EAAE,WAAW,EAC1BA,IAAI,CAAC,cAAc,EAAE,CAAC,EACtBA,IAAI,CACH,GAAG,EACHzB,EAAC,CACE2B,IAAI,CAAC,EACLC,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAA,GAAI,EAAE,EAClBC,CAAC,CAAEF,CAAC,IAAKG,QAAQ,CAACH,CAAC,CAACI,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACrD,CAAC;IACL,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf;MACA,IAAIC,gBAAe,GAAI,IAAI,CAAChC,QAAQ,CAACiC,MAAM,CACxCC,OAAO,IAAKA,OAAO,CAACC,QAAQ,CAACN,SAAQ,IAAKK,OAAO,CAACC,QAAQ,CAACN,SAAS,CAACO,MAAK,IAAK,CAClF,CAAC;;MAED;MACA,IAAIC,eAAc,GAAIL,gBAAgB,CAACM,MAAM,CAAC,CAACC,MAAM,EAAEL,OAAO,KAAK;QACjE,MAAMM,SAAQ,GAAIN,OAAO,CAACC,QAAQ,CAACN,SAAS,CAACY,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;QAE5D;QACAF,MAAM,CAACC,SAAS,IAAI,CAACD,MAAM,CAACC,SAAS,KAAK,CAAC,IAAI,CAAC;QAChD,OAAOD,MAAM;MACf,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,IAAIxC,IAAG,GAAI2C,MAAM,CAACC,OAAO,CAACN,eAAe,CAAC,CAACO,GAAG,CAAC,CAAC,CAACJ,SAAS,EAAEK,KAAK,CAAC,MAAM;QACtEL,SAAS,EAAEA,SAAS;QACpBK,KAAK,EAAEA;MACT,CAAC,CAAC,CAAC;MAEH,IAAIC,QAAO,GAAI,GAAG;QAChBC,SAAQ,GAAI,GAAG;QACfC,MAAK,GAAIC,IAAI,CAACC,GAAG,CAACJ,QAAQ,EAAEC,SAAS,IAAI,CAAC;MAE5C,IAAII,GAAE,GAAIvD,EAAC,CACRqB,MAAM,CAAC,IAAI,CAACC,KAAK,CAACkC,mBAAmB,EACrChC,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAEyB,QAAQ,EACtBzB,IAAI,CAAC,QAAQ,EAAE0B,SAAS,CAAC;;MAE5B;MACA,IAAIM,CAAA,GAAIF,GAAE,CACP/B,MAAM,CAAC,GAAG,EACVC,IAAI,CAAC,WAAW,EAAE,YAAW,GAAI2B,MAAK,GAAI,GAAE,GAAIA,MAAK,GAAI,GAAG,CAAC;MAEhE,IAAIM,KAAI,GAAI1D,EAAE,CAAC2D,YAAY,CAAC3D,EAAE,CAAC4D,gBAAgB,CAAC;MAEhD,IAAIC,GAAE,GAAI7D,EAAE,CAAC6D,GAAG,CAAC,CAAC,CAACC,KAAK,CAAC,UAAUjC,CAAC,EAAE;QACpC,OAAOA,CAAC,CAACoB,KAAK;MAChB,CAAC,CAAC;MAEF,IAAIc,IAAG,GAAI/D,EAAE,CAACgE,GAAG,CAAC,CAAC,CAACC,WAAW,CAACb,MAAM,CAAC,CAACc,WAAW,CAAC,CAAC,CAAC;MAEtD,IAAIF,GAAE,GAAIP,CAAC,CAACU,SAAS,CAAC,KAAK,CAAC,CAAChE,IAAI,CAAC0D,GAAG,CAAC1D,IAAI,CAAC,CAAC,CAACiE,KAAK,CAAC,CAAC,CAAC5C,MAAM,CAAC,GAAG,CAAC;MAEhEwC,GAAE,CACCxC,MAAM,CAAC,MAAM,EACbC,IAAI,CAAC,GAAG,EAAEsC,IAAI,EACdtC,IAAI,CAAC,MAAM,EAAE,UAAUI,CAAC,EAAE;QACzB,OAAO6B,KAAK,CAAC7B,CAAC,CAAC1B,IAAI,CAACyC,SAAS,CAAC;MAChC,CAAC,CAAC;MAEJ,IAAIyB,KAAI,GAAIrE,EAAE,CAACgE,GAAG,CAAC,CAAC,CAACC,WAAW,CAACb,MAAM,CAAC,CAACc,WAAW,CAAC,CAAC,CAAC;MAEvDF,GAAE,CACCxC,MAAM,CAAC,MAAM,EACbC,IAAI,CAAC,WAAW,EAAE,UAAUI,CAAC,EAAE;QAC9B,OAAO,YAAW,GAAIwC,KAAK,CAACC,QAAQ,CAACzC,CAAC,IAAI,GAAG;MAC/C,CAAC,EACAJ,IAAI,CAAC,aAAa,EAAE,QAAQ,EAC5B8C,IAAI,CAAC,UAAU1C,CAAC,EAAE;QACjB,OAAOA,CAAC,CAAC1B,IAAI,CAACyC,SAAQ,GAAI,GAAE,GAAIf,CAAC,CAAC1B,IAAI,CAAC8C,KAAI,GAAI,WAAW;MAC5D,CAAC,CAAC;IACN,CAAC;IAED/B,cAAcA,CAAA,EAAG;MACf;MACA,IAAIkB,gBAAe,GAAI,IAAI,CAAChC,QAAQ,CAACiC,MAAM,CACxCC,OAAO,IAAKA,OAAO,CAACC,QAAQ,CAACN,SAAQ,IAAKK,OAAO,CAACC,QAAQ,CAACN,SAAS,CAACO,MAAK,IAAK,CAClF,CAAC;;MAED;MACA,IAAIC,eAAc,GAAIL,gBAAgB,CAACM,MAAM,CAAC,CAACC,MAAM,EAAEL,OAAO,KAAK;QACjE,MAAMM,SAAQ,GAAIN,OAAO,CAACC,QAAQ,CAACN,SAAS,CAACY,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;QAE5D;QACAF,MAAM,CAACC,SAAS,IAAI,CAACD,MAAM,CAACC,SAAS,KAAK,CAAC,IAAI,CAAC;QAChD,OAAOD,MAAM;MACf,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,IAAI6B,UAAS,GAAI1B,MAAM,CAAC2B,IAAI,CAAChC,eAAe,CAAC;MAC7C,IAAIE,MAAK,GAAIG,MAAM,CAAC4B,MAAM,CAACjC,eAAe,CAAC;MAE3C,IAAIS,QAAO,GAAI,GAAG;QAChBC,SAAQ,GAAI,GAAG;QACfwB,UAAS,GAAI,CAAC;QACdC,aAAY,GAAI,EAAE;MACpB,IAAIC,aAAY,GAAI,EAAE;MACtB,IAAIC,QAAO,GAAI5B,QAAO,GAAIsB,UAAU,CAAChC,MAAM;MAE3C,IAAIe,GAAE,GAAIvD,EAAC,CACRqB,MAAM,CAAC,IAAI,CAACC,KAAK,CAACyD,mBAAmB,EACrCvD,MAAM,CAAC,KAAK,EACZC,IAAI,CAAC,OAAO,EAAEyB,QAAQ,EACtBzB,IAAI,CAAC,QAAQ,EAAE0B,SAAS,CAAC;MAE5B,IAAI6B,MAAK,GAAIhF,EAAC,CACXiF,WAAW,CAAC,EACZC,MAAM,CAAC,CAAC,CAAC,EAAElF,EAAE,CAACmF,GAAG,CAACxC,MAAM,IAAIiC,aAAa,CAAC,EAC1CQ,KAAK,CAAC,CAAC,CAAC,EAAEjC,SAAQ,GAAIyB,aAAa,CAAC,CAAC;MAExC,IAAIS,QAAO,GAAI9B,GAAE,CACdY,SAAS,CAAC,MAAM,EAChBhE,IAAI,CAACwC,MAAM,EACXyB,KAAK,CAAC,EACN5C,MAAM,CAAC,MAAM,EACbC,IAAI,CAAC,GAAG,EAAE,UAAUI,CAAC,EAAE;QACtB,OAAOsB,SAAQ,GAAI6B,MAAM,CAACnD,CAAC,IAAI,IAAIsB,SAAQ,GAAI6B,MAAM,CAACnD,CAAC,IAAI,CAAC;MAC9D,CAAC,EACAJ,IAAI,CAAC,QAAQ,EAAE,UAAUI,CAAC,EAAE;QAC3B,OAAOmD,MAAM,CAACnD,CAAC,IAAI+C,aAAa;MAClC,CAAC,EACAnD,IAAI,CAAC,OAAO,EAAEqD,QAAO,GAAIH,UAAU,EACnClD,IAAI,CAAC,WAAW,EAAE,UAAUI,CAAC,EAAEC,CAAC,EAAE;QACjC,IAAIwD,SAAQ,GAAI,CAACR,QAAO,GAAIhD,CAAA,GAAI+C,aAAa,EAAE,CAAC,CAAC;QACjD,OAAO,YAAW,GAAIS,SAAQ,GAAI,GAAG;MACvC,CAAC,CAAC;MAEJ/B,GAAE,CACCY,SAAS,CAAC,MAAM,EAChBhE,IAAI,CAACwC,MAAM,EACXyB,KAAK,CAAC,EACN5C,MAAM,CAAC,MAAM,EACb+C,IAAI,CAAC,UAAU1C,CAAC,EAAE;QACjB,OAAOA,CAAC;MACV,CAAC,EACAJ,IAAI,CAAC,GAAG,EAAE,UAAUI,CAAC,EAAE;QACtB,OAAOsB,SAAQ,GAAI6B,MAAM,CAACnD,CAAC,IAAI,CAAC;MAClC,CAAC,EACAJ,IAAI,CAAC,GAAG,EAAE,UAAUI,CAAC,EAAEC,CAAC,EAAE;QACzB,OAAOgD,QAAO,GAAIhD,CAAA,GAAI+C,aAAa;MACrC,CAAC,EACApD,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;MAEtBuD,MAAK,GAAIhF,EAAC,CACPiF,WAAW,CAAC,EACZC,MAAM,CAAC,CAAC,CAAC,EAAElF,EAAE,CAACmF,GAAG,CAACxC,MAAM,IAAIiC,aAAa,CAAC,EAC1CQ,KAAK,CAAC,CAACjC,SAAQ,GAAIyB,aAAa,EAAE,CAAC,CAAC,CAAC;;MAExC;MACA,IAAIW,MAAK,GAAIvF,EAAC,CACXwF,SAAS,CAAC,EACVN,MAAM,CAACV,UAAU,EACjBY,KAAK,CAAC,CAAC,CAAC,EAAElC,QAAO,GAAI2B,aAAa,CAAC,CAAC;MAEvC,IAAIY,KAAI,GAAIzF,EAAE,CAAC0F,UAAU,CAAC,CAAC,CAACC,KAAK,CAACJ,MAAM,CAAC;MAEzC,IAAIK,KAAI,GAAI5F,EAAE,CAAC6F,QAAQ,CAAC,CAAC,CAACF,KAAK,CAACX,MAAM,CAAC;MACvCzB,GAAE,CACC/B,MAAM,CAAC,GAAG,EACVC,IAAI,CAAC,WAAW,EAAE,YAAW,GAAIoD,aAAY,GAAI,MAAM,EACvDiB,IAAI,CAACF,KAAK,CAAC;MAEd,IAAIG,cAAa,GAAI5C,SAAQ,GAAI,EAAE;MACnCI,GAAE,CACC/B,MAAM,CAAC,GAAG,EACVC,IAAI,CAAC,WAAW,EAAE,YAAW,GAAIoD,aAAY,GAAI,IAAG,GAAIkB,cAAa,GAAI,GAAG,EAC5ED,IAAI,CAACL,KAAK,CAAC;MAEd,OAAOJ,QAAQ;IACjB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}