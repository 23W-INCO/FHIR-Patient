{"ast":null,"code":"import axios from \"axios\";\nimport * as d3 from \"d3\";\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\"\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios.get(\"http://localhost:3000/api/patients\").then(success => {\n          console.log(\"Successful request to FHIR server\");\n          console.log(success);\n          this.patients = success.data.entry;\n          this.renderD3Charts();\n        }).catch(error => {\n          console.log(error);\n          alert(`Error! ${error}`);\n        });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n    renderD3Charts() {\n      //  this.renderLineChart();\n      this.renderPieChart();\n      this.renderBarChart();\n    },\n    renderLineChart() {\n      const svgLine = d3.select(this.$refs.d3Container).append(\"svg\").attr(\"width\", 400).attr(\"height\", 200);\n      svgLine.append(\"path\").datum(this.patients).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 2).attr(\"d\", d3.line().x((d, i) => i * 80).y(d => parseInt(d.birthDate.split(\"-\")[2]) * 2));\n    },\n    renderPieChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(patient => patient.resource.birthDate && patient.resource.birthDate.length >= 4);\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n      var birthYears = Object.keys(birthYearCounts);\n      var counts = Object.values(birthYearCounts);\n      var data = [{\n        \"birthYear\": \"Android\",\n        \"percentage\": 40.11\n      }, {\n        \"birthYear\": \"Windows\",\n        \"percentage\": 36.69\n      }, {\n        \"birthYear\": \"iOS\",\n        \"percentage\": 13.06\n      }];\n      var svgWidth = 500,\n        svgHeight = 300,\n        radius = Math.min(svgWidth, svgHeight) / 2;\n      var svg = d3.select(this.$refs.d3PieChartContainer).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n\n      //Create group element to hold pie chart    \n      var g = svg.append(\"g\").attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\");\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n      var pie = d3.pie().value(function (d) {\n        return d.percentage;\n      });\n      var path = d3.arc().outerRadius(radius).innerRadius(0);\n      var arc = g.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\n      arc.append(\"path\").attr(\"d\", path).attr(\"fill\", function (d) {\n        return color(d.data.percentage);\n      });\n      var label = d3.arc().outerRadius(radius).innerRadius(0);\n      arc.append(\"text\").attr(\"transform\", function (d) {\n        return \"translate(\" + label.centroid(d) + \")\";\n      }).attr(\"text-anchor\", \"middle\").text(function (d) {\n        return d.data.birthYear + \":\" + d.data.percentage + \"%\";\n      });\n    },\n    renderBarChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(patient => patient.resource.birthDate && patient.resource.birthDate.length >= 4);\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n      var birthYears = Object.keys(birthYearCounts);\n      var counts = Object.values(birthYearCounts);\n      var svgWidth = 700,\n        svgHeight = 500,\n        barPadding = 2,\n        yGraphPadding = 20;\n      var xGraphPadding = 30;\n      var barWidth = svgWidth / birthYears.length;\n      var svg = d3.select(this.$refs.d3BarChartContainer).append(\"svg\").attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n      var yScale = d3.scaleLinear().domain([0, d3.max(counts) + yGraphPadding]).range([0, svgHeight + yGraphPadding]);\n      var barChart = svg.selectAll(\"rect\").data(counts).enter().append(\"rect\").attr(\"y\", function (d) {\n        return svgHeight - yScale(d);\n      }).attr(\"height\", function (d) {\n        return yScale(d) - yGraphPadding;\n      }).attr(\"width\", barWidth - barPadding).attr(\"transform\", function (d, i) {\n        var translate = [barWidth * i + xGraphPadding, 0];\n        return \"translate(\" + translate + \")\";\n      });\n      svg.selectAll(\"text\").data(counts).enter().append(\"text\").text(function (d) {\n        return d;\n      }).attr(\"y\", function (d) {\n        return svgHeight - yScale(d) - 2;\n      }).attr(\"x\", function (d, i) {\n        return barWidth * i + xGraphPadding;\n      }).attr(\"fill\", \"red\");\n      yScale = d3.scaleLinear().domain([0, d3.max(counts) + yGraphPadding]).range([svgHeight - yGraphPadding, 0]);\n\n      // Update xScale to use d3.scaleBand()\n      var xScale = d3.scaleBand().domain(birthYears).range([0, svgWidth - xGraphPadding]);\n      var xAxis = d3.axisBottom().scale(xScale);\n      var yAxis = d3.axisLeft().scale(yScale);\n      svg.append(\"g\").attr(\"transform\", \"translate(\" + xGraphPadding + \", 0)\").call(yAxis);\n      var xAxisTranslate = svgHeight - 20;\n      svg.append(\"g\").attr(\"transform\", \"translate(\" + xGraphPadding + \", \" + xAxisTranslate + \")\").call(xAxis);\n      return barChart;\n    }\n  }\n};","map":{"version":3,"names":["axios","d3","mounted","fetchPatients","data","patients","searchId","methods","get","then","success","console","log","entry","renderD3Charts","catch","error","alert","message","renderPieChart","renderBarChart","renderLineChart","svgLine","select","$refs","d3Container","append","attr","datum","line","x","d","i","y","parseInt","birthDate","split","filteredPatients","filter","patient","resource","length","birthYearCounts","reduce","counts","birthYear","substring","birthYears","Object","keys","values","svgWidth","svgHeight","radius","Math","min","svg","d3PieChartContainer","g","color","scaleOrdinal","schemeCategory10","pie","value","percentage","path","arc","outerRadius","innerRadius","selectAll","enter","label","centroid","text","barPadding","yGraphPadding","xGraphPadding","barWidth","d3BarChartContainer","yScale","scaleLinear","domain","max","range","barChart","translate","xScale","scaleBand","xAxis","axisBottom","scale","yAxis","axisLeft","call","xAxisTranslate"],"sources":["C:\\xampp\\htdocs\\fhir_web_app\\fhir_web_app_frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FHIR Web App</h1>\n    <button @click=\"fetchPatients\">Fetch Patients</button>\n    <div v-if=\"patients.length\">\n      <h2>Patients</h2>\n      <ul>\n        <li v-for=\"patient in patients\" :key=\"patient.id\">\n          {{ patient.resource.name[0].given[0] }} {{ patient.resource.birthDate ? new Date(patient.resource.birthDate).getFullYear(): 0  }}\n        </li>\n      </ul>\n    </div>\n    <div ref=\"d3Container\"></div>\n     <div ref=\"d3BarChartContainer\"></div>\n      <div ref=\"d3PieChartContainer\"></div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\",\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios\n          .get(\"http://localhost:3000/api/patients\")\n          .then((success) => {\n            console.log(\"Successful request to FHIR server\");\n            console.log(success);\n            this.patients = success.data.entry;\n            this.renderD3Charts();\n          })\n          .catch((error) => {\n            console.log(error);\n            alert(`Error! ${error}`);\n          });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n\n    renderD3Charts() {\n      //  this.renderLineChart();\n       this.renderPieChart();\n      this.renderBarChart();\n    },\n    renderLineChart() {\n      const svgLine = d3\n        .select(this.$refs.d3Container)\n        .append(\"svg\")\n        .attr(\"width\", 400)\n        .attr(\"height\", 200);\n\n      svgLine\n        .append(\"path\")\n        .datum(this.patients)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 2)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x((d, i) => i * 80)\n            .y((d) => parseInt(d.birthDate.split(\"-\")[2]) * 2)\n        );\n    },\n    renderPieChart() {\n\n        // Filter out patients with empty birth dates\n  var filteredPatients = this.patients.filter(\n    (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n  );\n\n  // Extract birth years and count occurrences\n  var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n    const birthYear = patient.resource.birthDate.substring(0, 4);\n\n    // Increment the count for the birth year\n    counts[birthYear] = (counts[birthYear] || 0) + 1;\n    return counts;\n  }, {});\n\n  var birthYears = Object.keys(birthYearCounts);\n  var counts = Object.values(birthYearCounts);\n\nvar data = [\n    {\"birthYear\": \"Android\", \"percentage\": 40.11}, \n    {\"birthYear\": \"Windows\", \"percentage\": 36.69},\n    {\"birthYear\": \"iOS\", \"percentage\": 13.06}\n];\n\n\nvar svgWidth = 500, svgHeight = 300, radius =  Math.min(svgWidth, svgHeight) / 2;\n\n\n var svg = d3.select(this.$refs.d3PieChartContainer)\n        .append(\"svg\")\n      .attr(\"width\", svgWidth)\n      .attr(\"height\", svgHeight);\n\n//Create group element to hold pie chart    \nvar g = svg.append(\"g\")\n    .attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\") ;\n\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\n\nvar pie = d3.pie().value(function(d) { \n     return d.percentage; \n});\n\nvar path = d3.arc()\n    .outerRadius(radius)\n    .innerRadius(0);\n \nvar arc = g.selectAll(\"arc\")\n    .data(pie(data))\n    .enter()\n    .append(\"g\");\n\narc.append(\"path\")\n    .attr(\"d\", path)\n    .attr(\"fill\", function(d) { return color(d.data.percentage); });\n        \nvar label = d3.arc()\n    .outerRadius(radius)\n    .innerRadius(0);\n            \narc.append(\"text\")\n    .attr(\"transform\", function(d) { \n        return \"translate(\" + label.centroid(d) + \")\"; \n    })\n    .attr(\"text-anchor\", \"middle\")\n    .text(function(d) { return d.data.birthYear+\":\"+d.data.percentage+\"%\"; });\n    \n    },\n\n    renderBarChart() {\n  // Filter out patients with empty birth dates\n  var filteredPatients = this.patients.filter(\n    (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n  );\n\n  // Extract birth years and count occurrences\n  var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n    const birthYear = patient.resource.birthDate.substring(0, 4);\n\n    // Increment the count for the birth year\n    counts[birthYear] = (counts[birthYear] || 0) + 1;\n    return counts;\n  }, {});\n\n  var birthYears = Object.keys(birthYearCounts);\n  var counts = Object.values(birthYearCounts);\n\n  var svgWidth = 700,\n    svgHeight = 500,\n    barPadding = 2,\n    yGraphPadding = 20;\n  var xGraphPadding = 30;\n  var barWidth = svgWidth / birthYears.length;\n\n  var svg = d3\n    .select(this.$refs.d3BarChartContainer)\n    .append(\"svg\")\n    .attr(\"width\", svgWidth)\n    .attr(\"height\", svgHeight);\n\n  var yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(counts) + yGraphPadding])\n    .range([0, svgHeight + yGraphPadding]);\n\n  var barChart = svg\n    .selectAll(\"rect\")\n    .data(counts)\n    .enter()\n    .append(\"rect\")\n    .attr(\"y\", function (d) {\n      return svgHeight - yScale(d);\n    })\n    .attr(\"height\", function (d) {\n      return yScale(d) - yGraphPadding;\n    })\n    .attr(\"width\", barWidth - barPadding)\n    .attr(\"transform\", function (d, i) {\n      var translate = [(barWidth * i) + xGraphPadding, 0];\n      return \"translate(\" + translate + \")\";\n    });\n\n  svg\n    .selectAll(\"text\")\n    .data(counts)\n    .enter()\n    .append(\"text\")\n    .text(function (d) {\n      return d;\n    })\n    .attr(\"y\", function (d) {\n      return svgHeight - yScale(d) - 2;\n    })\n    .attr(\"x\", function (d, i) {\n      return ((barWidth) * i) + xGraphPadding;\n    })\n    .attr(\"fill\", \"red\");\n\n  yScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(counts) + yGraphPadding])\n    .range([svgHeight - yGraphPadding, 0]);\n\n   // Update xScale to use d3.scaleBand()\n  var xScale = d3\n    .scaleBand()\n    .domain(birthYears)\n    .range([0, svgWidth - xGraphPadding]);\n\n  var xAxis = d3.axisBottom().scale(xScale);\n\n  var yAxis = d3.axisLeft().scale(yScale);\n  svg.append(\"g\").attr(\"transform\", \"translate(\" + xGraphPadding + \", 0)\").call(yAxis);\n\n  var xAxisTranslate = svgHeight - 20;\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + xGraphPadding + \", \" + xAxisTranslate + \")\")\n    .call(xAxis);\n\n  return barChart;\n},\n\n  },\n};\n</script>\n<style>\n/* Add your styles here */\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}