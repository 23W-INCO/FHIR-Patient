{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pos-f-t\"\n};\nconst _hoisted_2 = {\n  class: \"navbar fixed-top navbar-light bg-light\"\n};\nconst _hoisted_3 = {\n  class: \"container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"a\", {\n  class: \"navbar-brand\"\n}, \" PATIENT FHIR\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"FHIR Web App\", -1 /* HOISTED */);\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Patients\", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  ref: \"d3LineChartContainer\"\n};\nconst _hoisted_9 = {\n  ref: \"d3BarChartContainer\"\n};\nconst _hoisted_10 = {\n  ref: \"d3PieChartContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"template\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"nav\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_router_link, {\n    class: \"vavbar-brand\",\n    to: \"/\"\n  }, {\n    default: _withCtx(() => [_hoisted_4]),\n    _: 1 /* STABLE */\n  })])])])]), _createElementVNode(\"div\", null, [_hoisted_5, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-info rounded-pill\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.fetchPatients && $options.fetchPatients(...args))\n  }, \"Fetch Patients\"), $data.patients.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_hoisted_7, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: patient.id\n    }, _toDisplayString(patient.resource.name[0].given[0]) + \" \" + _toDisplayString(patient.resource.birthDate ? new Date(patient.resource.birthDate).getFullYear() : 0), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_9, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_10, null, 512 /* NEED_PATCH */)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","key","ref","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_router_link","to","default","_withCtx","_hoisted_4","_","_hoisted_5","onClick","_cache","args","$options","fetchPatients","$data","patients","length","_hoisted_6","_hoisted_7","_renderList","patient","id","resource","name","given","_toDisplayString","birthDate","Date","getFullYear","_createCommentVNode","_hoisted_8","_hoisted_9","_hoisted_10"],"sources":["C:\\xampp\\htdocs\\fhir_web_app\\fhir_web_app_frontend\\src\\App.vue"],"sourcesContent":["<template>\n<template>\n<div class=\"pos-f-t\">\n  <nav class=\"navbar fixed-top navbar-light bg-light\">\n  <div class=\"container\">\n    <router-link class=\"vavbar-brand\" to=\"/\"><a class=\"navbar-brand\" > PATIENT FHIR</a></router-link>\n  </div>\n</nav>\n</div>\n</template>\n  <div>\n    <h1>FHIR Web App</h1>\n    <button class=\"btn btn-outline-info rounded-pill\" @click=\"fetchPatients\">Fetch Patients</button>\n    <div v-if=\"patients.length\">\n      <h2>Patients</h2>\n      <ul>\n        <li v-for=\"patient in patients\" :key=\"patient.id\">\n          {{ patient.resource.name[0].given[0] }}\n          {{\n            patient.resource.birthDate\n              ? new Date(patient.resource.birthDate).getFullYear()\n              : 0\n          }}\n        </li>\n      </ul>\n    </div>\n    <div ref=\"d3LineChartContainer\"></div>\n    <div ref=\"d3BarChartContainer\"></div>\n    <div ref=\"d3PieChartContainer\"></div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\n\nexport default {\n  mounted() {\n    this.fetchPatients();\n  },\n  data() {\n    return {\n      patients: [],\n      searchId: \"\",\n    };\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        await axios\n          .get(\"http://localhost:3000/api/patients\")\n          .then((success) => {\n            console.log(\"Successful request to FHIR server\");\n            console.log(success);\n            this.patients = success.data.entry;\n            this.renderD3Charts();\n          })\n          .catch((error) => {\n            console.log(error);\n            alert(`Error! ${error}`);\n          });\n      } catch (error) {\n        console.error(\"Error fetching patients:\", error.message);\n      }\n    },\n\n    renderD3Charts() {\n       this.renderLineChart();\n     this.renderPieChart();\n      this.renderBarChart();\n    },\n   renderLineChart() {\n  // Filter out patients with empty birth dates\n  var filteredPatients = this.patients.filter(\n    (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n  );\n\n  // Extract birth years and count occurrences\n  var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n    const birthYear = patient.resource.birthDate.substring(0, 4);\n\n    // Increment the count for the birth year\n    counts[birthYear] = (counts[birthYear] || 0) + 1;\n    return counts;\n  }, {});\n\n  var data = Object.entries(birthYearCounts).map(([birthYear, count]) => ({\n    birthYear: parseInt(birthYear), // Convert birthYear to a number\n    count: count,\n  }));\n\n  var svgWidth = 600,\n    svgHeight = 400;\n  var margin = { top: 20, right: 20, bottom: 30, left: 50 };\n  var width = svgWidth - margin.left - margin.right;\n  var height = svgHeight - margin.top - margin.bottom;\n\n  var svg = d3\n    .select(this.$refs.d3LineChartContainer)\n    .append(\"svg\")\n    .attr(\"width\", svgWidth)\n    .attr(\"height\", svgHeight);\n\n  var g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  var x = d3.scaleLinear().rangeRound([0, width]);\n  var y = d3.scaleLinear().rangeRound([height, 0]);\n\n  var line = d3\n    .line()\n    .x(function (d) {\n      return x(d.birthYear);\n    })\n    .y(function (d) {\n      return y(d.count);\n    });\n\n  x.domain(\n    d3.extent(data, function (d) {\n      return d.birthYear;\n    })\n  );\n  y.domain(\n    d3.extent(data, function (d) {\n      return d.count;\n    })\n  );\n\n  g.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x))\n    .select(\".domain\")\n    .remove();\n\n  g.append(\"g\")\n    .call(d3.axisLeft(y))\n    .append(\"text\")\n    .attr(\"fill\", \"#000\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 6)\n    .attr(\"dy\", \"0.71em\")\n    .attr(\"text-anchor\", \"end\")\n    .text(\"Patient Count\");\n\n  g.append(\"path\")\n    .datum(data)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"steelblue\")\n    .attr(\"stroke-linejoin\", \"round\")\n    .attr(\"stroke-linecap\", \"round\")\n    .attr(\"stroke-width\", 1.5)\n    .attr(\"d\", line);\n},\n\n    renderPieChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(\n        (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n      );\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n\n      var data = Object.entries(birthYearCounts).map(([birthYear, count]) => ({\n        birthYear: birthYear,\n        count: count,\n      }));\n\n      var svgWidth = 500,\n        svgHeight = 300,\n        radius = Math.min(svgWidth, svgHeight) / 2;\n\n      var svg = d3\n        .select(this.$refs.d3PieChartContainer)\n        .append(\"svg\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n\n      // Create group element to hold pie chart\n      var g = svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + radius + \",\" + radius + \")\");\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      var pie = d3.pie().value(function (d) {\n        return d.count;\n      });\n\n      var path = d3.arc().outerRadius(radius).innerRadius(0);\n\n      var arc = g.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\n\n      arc\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"fill\", function (d) {\n          return color(d.data.birthYear);\n        });\n\n      var label = d3.arc().outerRadius(radius).innerRadius(0);\n\n      arc\n        .append(\"text\")\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + label.centroid(d) + \")\";\n        })\n        .attr(\"text-anchor\", \"middle\")\n        .text(function (d) {\n          return d.data.birthYear + \":\" + d.data.count + \" patients\";\n        });\n    },\n\n    renderBarChart() {\n      // Filter out patients with empty birth dates\n      var filteredPatients = this.patients.filter(\n        (patient) => patient.resource.birthDate && patient.resource.birthDate.length >= 4\n      );\n\n      // Extract birth years and count occurrences\n      var birthYearCounts = filteredPatients.reduce((counts, patient) => {\n        const birthYear = patient.resource.birthDate.substring(0, 4);\n\n        // Increment the count for the birth year\n        counts[birthYear] = (counts[birthYear] || 0) + 1;\n        return counts;\n      }, {});\n\n      var birthYears = Object.keys(birthYearCounts);\n      var counts = Object.values(birthYearCounts);\n\n      var svgWidth = 700,\n        svgHeight = 500,\n        barPadding = 2,\n        yGraphPadding = 20;\n      var xGraphPadding = 30;\n      var barWidth = svgWidth / birthYears.length;\n\n      var svg = d3\n        .select(this.$refs.d3BarChartContainer)\n        .append(\"svg\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n\n      var yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(counts) + yGraphPadding])\n        .range([0, svgHeight + yGraphPadding]);\n\n      var barChart = svg\n        .selectAll(\"rect\")\n        .data(counts)\n        .enter()\n        .append(\"rect\")\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d) > 0 ? svgHeight - yScale(d) : 0;\n        })\n        .attr(\"height\", function (d) {\n          return yScale(d) - yGraphPadding > 0 ? yScale(d) - yGraphPadding : 0;\n        })\n        .attr(\"width\", barWidth - barPadding)\n        .attr(\"transform\", function (d, i) {\n          var translate = [barWidth * i + xGraphPadding, 0];\n          return \"translate(\" + translate + \")\";\n        });\n\n      svg\n        .selectAll(\"text\")\n        .data(counts)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n          return d;\n        })\n        .attr(\"y\", function (d) {\n          return svgHeight - yScale(d) - 2;\n        })\n        .attr(\"x\", function (d, i) {\n          return barWidth * i + xGraphPadding;\n        })\n        .attr(\"fill\", \"red\");\n\n      yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(counts) + yGraphPadding])\n        .range([svgHeight - yGraphPadding, 0]);\n\n      // Update xScale to use d3.scaleBand()\n      var xScale = d3\n        .scaleBand()\n        .domain(birthYears)\n        .range([0, svgWidth - xGraphPadding]);\n\n      var xAxis = d3.axisBottom().scale(xScale);\n\n      var yAxis = d3.axisLeft().scale(yScale);\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + xGraphPadding + \", 0)\")\n        .call(yAxis);\n\n      var xAxisTranslate = svgHeight - 20;\n      svg\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + xGraphPadding + \", \" + xAxisTranslate + \")\")\n        .call(xAxis);\n\n      return barChart;\n    },\n  },\n};\n</script>\n<style>\n/* Add your styles here */\n</style>\n"],"mappings":";;EAEKA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAW;gCACqBC,mBAAA,CAA0C;EAAvCD,KAAK,EAAC;AAAc,GAAE,eAAa;gCAM/EC,mBAAA,CAAqB,YAAjB,cAAY;;EAXpBC,GAAA;AAAA;gCAcMD,mBAAA,CAAiB,YAAb,UAAQ;;EAYTE,GAAG,EAAC;AAAsB;;EAC1BA,GAAG,EAAC;AAAqB;;EACzBA,GAAG,EAAC;AAAqB;;;uBA5BlCC,mBAAA,CAAAC,SAAA,SACAJ,mBAAA,CAQW,mBAPXA,mBAAA,CAMM,OANNK,UAMM,GALJL,mBAAA,CAII,OAJJM,UAII,GAHJN,mBAAA,CAEM,OAFNO,UAEM,GADJC,YAAA,CAAiGC,sBAAA;IAApFV,KAAK,EAAC,cAAc;IAACW,EAAE,EAAC;;IALzCC,OAAA,EAAAC,QAAA,CAK6C,MAA0C,CAA1CC,UAA0C,C;IALvFC,CAAA;cAUEd,mBAAA,CAmBM,cAlBJe,UAAqB,EACrBf,mBAAA,CAAgG;IAAxFD,KAAK,EAAC,mCAAmC;IAAEiB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,gBAAc,GAC5EG,KAAA,CAAAC,QAAQ,CAACC,MAAM,I,cAA1BpB,mBAAA,CAYM,OAzBVqB,UAAA,GAcMC,UAAiB,EACjBzB,mBAAA,CASK,c,kBARHG,mBAAA,CAOKC,SAAA,QAvBbsB,WAAA,CAgB8BL,KAAA,CAAAC,QAAQ,EAAnBK,OAAO;yBAAlBxB,mBAAA,CAOK;MAP4BF,GAAG,EAAE0B,OAAO,CAACC;wBACzCD,OAAO,CAACE,QAAQ,CAACC,IAAI,IAAIC,KAAK,OAAM,GACvC,GAAAC,gBAAA,CACEL,OAAO,CAACE,QAAQ,CAACI,SAAS,G,IAAqBC,IAAI,CAACP,OAAO,CAACE,QAAQ,CAACI,SAAS,EAAEE,WAAW,K;wCAnBvGC,mBAAA,gBA0BIpC,mBAAA,CAAsC,OAAtCqC,UAAsC,+BACtCrC,mBAAA,CAAqC,OAArCsC,UAAqC,+BACrCtC,mBAAA,CAAqC,OAArCuC,WAAqC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}